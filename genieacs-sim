#!/usr/bin/env node
"use strict";

const cluster = require("cluster");
const pkg = require("./package.json");
const { createSimulator, formatXML } = require("./src/main");

if (cluster.isMaster) {
  const program = require("commander")
    .version(pkg.version)
    .description(pkg.description)
    .option("-u, --acs-url [url]", "ACS URL to contact", "http://127.0.0.1:57547/")
    .option("-m, --data-model [filename]", "Data model template", "device-00259E-EG8145V5-48575443A94196A5-2023-03-28T154335106Z")
    .option("-p, --processes [count]", "Number of devices to simulate", parseFloat, 1)
    .option("-w, --wait [milliseconds]", "Waiting period between process spawning", parseFloat, 1000)
    .option("-s, --serial [offset]", "Base serial number", parseFloat, 0)
    .parse(process.argv);

  program.parse()


  if (!/^(http|https):\/\//.test(program.opts().acsUrl)) {
    console.error(`Invalid ACS URL: "${program.opts().acsUrl}"`);
    process.exit(1);
  }
  let baseMac = parseInt(process.env['GENIEACS_SIM_BASE_MAC_ADDRESS']) || 281474959933440; 
  for ( let i = 0; i < program.opts().processes; baseMac++, i++ ) {
    let usedMac = baseMac.toString(16).padStart(12,'0').toUpperCase().slice(-12).match(/../g).join(':');
    setTimeout(function() {
      let env = {
        "MAC_ADDR": usedMac,
        "SERIAL_NUMBER": `00000${program.opts().serial + i}`.slice(-6),
        "ACS_URL": program.opts().acsUrl,
        "DATA_MODEL": program.opts().dataModel,
      };
      let worker = cluster.fork(env);
      worker.env = env;
    }, 1000 + i  * program.opts().wait)
  }
  cluster.on("fork", function(worker) {
    console.log(`Simulator ${worker.env["SERIAL_NUMBER"]} started`);
  });
  cluster.on("exit", function(worker, code, signal) {
    console.log(`Simulator ${worker.env["SERIAL_NUMBER"]} died (${signal || code}). Restarting in 10 seconds...`)
    setTimeout(function() {
      let newWorker = cluster.fork(worker.env);
      newWorker.env = worker.env;
    }, 10000);
  });
} else {
  const acsUrl = process.env["ACS_URL"];
  const dataModel = process.env["DATA_MODEL"];
  const serialNumber = process.env["SERIAL_NUMBER"];
  const macAddr = process.env["MAC_ADDR"];

  function print(...strings) {
    console.log(`[${new Date().toISOString()}]`, ...strings);
  }
  function printXML(prefix, xml, full=false) {
    print(prefix, `'${(full ? formatXML : extractCwmpFromXML)(xml)}'.`);
  }
  function extractCwmpFromXML(xml) {
    if (!xml) return '';
    // Matches all lines inside the <cwmp:something> tag.
    const content = formatXML(xml, '    ').match(/<cwmp:\w+>[^]+(\n\s+)<\/cwmp:\w+>/);
    if (!content) return;
    return content[1]+content[0];
  }

  let simulator = createSimulator(acsUrl, dataModel, serialNumber, macAddr, true)
  .on('error', (e) => { // connection or task name errors during cwmp communication.
    console.error(e);
    process.exit(1);
  })
  .on('requested', (request) => print('RECEIVED REQUEST FROM ACS'))
  .on('sent', (request) => printXML('SENT BODY:', request.body))
  .on('response', (response) => printXML('RECEIVED RESPONSE BODY:', response.body))
  .on('task', (task) => print(`PROCESSED task: ${task.name}.`))
  .on('diagnostic', (name) => print(`FINISHED diagnostic: '${name}'.`))
  .on('sessionStart', (event) => print(`started SESSION with event: '${event}'.`))
  .on('sessionEnd', (event) => print(`finished SESSION for event: '${event}'.`));
  return simulator.start().catch((e) => { // Catching start error.
    console.error(e);
    process.exit(1);
  });
}
