#!/usr/bin/env node
"use strict";

const cluster = require("cluster");
const pkg = require("./package.json");
const { forkSimulations, runSimulation } = require("./src/main");


if (!cluster.isMaster) {
  const acsUrl = process.env["ACS_URL"];
  const dataModel = process.env["DATA_MODEL"];
  const serialNumber = process.env["SERIAL_NUMBER"];
  const macAddr = process.env["MAC_ADDR"];
  return runSimulation(acsUrl, dataModel, serialNumber, macAddr);
} else {
  cluster.on("fork", function(worker) {
    console.log(`Simulator ${worker.env["SERIAL_NUMBER"]} started`);
  });
  cluster.on("exit", function(worker, code, signal) {
    console.log(`Simulator ${worker.env["SERIAL_NUMBER"]} died (${signal || code}). Restarting in 10 seconds...`)
    setTimeout(function() {
      let newWorker = cluster.fork(worker.env);
      newWorker.env = worker.env;
    }, 10000);
  });
}




function resolvePath(p) {
  return require("path").resolve(process.cwd(), p);
}

const program = require("commander")
  .version(pkg.version)
  .description(pkg.description)
  .option("-u, --acs-url [url]", "ACS URL to contact (default: http://127.0.0.1:57547/)", "http://127.0.0.1:57547/")
  .option("-m, --data-model [filename]", "Data model template", resolvePath, "./models/device-C0B101-ZXHN%20H199A-ZTEYH86LCN10105-2022-10-14T170342091Z.csv")
  .option("-p, --processes [count]", "Number of devices to simulate (default: 1)", parseFloat, 1)
  .option("-w, --wait [milliseconds]", "Waiting period between process spawning (default: 1000)", parseFloat, 1000)
  .option("-s, --serial [offset]", "Serial number offset (default: 0)", parseFloat, 0)
  .parse(process.argv);

program.parse()

forkSimulations(
  program.opts().acsUrl,
  program.opts().processes,
  program.opts().serial,
  program.opts().dataModel,
  program.opts().wait
)
